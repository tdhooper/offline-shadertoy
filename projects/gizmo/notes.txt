in our Map function, we pick a code point we want a gizmo to transform a 3d position

picking any point might not be transformed by the gizmo - as it might be inside a branch

try this

1. render a low-res viewpoort, with depth
2. apply a transformation
3. find changed pixels
4. pick a changed pixel
5. use depth to project into 3d


we want to build a basis matrix for this gizmo

we want to find the transformation origin for the gizmo

find the origin through gradient descent
    pick 6 points in pairs of positive/negative cardinal directions around the starting point
    run them through Map - up until the code point we placed the gizmo
    given the line formed by each pair, find the closest point on the line to (0,0,0)
    do an inverse interpolation with this point on the line, to get a new starting coordinate value
    run the routine again with the new starting point
    stop when the closest point to (0,0,0) on each line is within some distance
    OPTIONAL: apply a scaling factor at each step so we don't overshoot

to find the axes, calculate the jacobian for this point
    pick small offsets in x,y,z
    transform them through Map, and divide the resulting coordinate by the offset amount
    use each of these coords as axes in a basis matrix

How to get the new value for P at any code point?
    have some global value that gets written by the inserted code
    use a single pixel texture with the same shader loaded
    we can evaluate several points at once when calculating axes


Program Design

prototype:

* Write gizmo(p) in code, which:
    * transforms p, according to some uniforms
    * writes the transformed value of p to some global value, gizmo_p2
* When gizmo is being used, copy the shader program, and replace the main function with
  something that outputs gizmo_p2 as a colour
* fnd the orgin as described above
* render a sphere mesh at the found point


Making it Generic

How do we instrument any shader?

* User creates a `float GIZMO_MAP(p)` method that calls their global map
* Find the multipass render node that includes the GIZMO_MAP function
* Copy the render node, and set a new shader:
    * Rename the main() function to GIZMO_MAIN
    * Insert our own main() function, that runs GIZMO_MAIN (it might have setup code)
    * Insert GIZMO functions and uniforms
    * Call the GIZMO_MAP function with P values, and return as FragColor


steps:  
* 

https://eliemichel.github.io/SdfManipulation/
















